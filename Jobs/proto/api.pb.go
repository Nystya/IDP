// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

type ErrorCode struct {
	Err                  int32    `protobuf:"varint,1,opt,name=err,proto3" json:"err,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorCode) Reset()         { *m = ErrorCode{} }
func (m *ErrorCode) String() string { return proto.CompactTextString(m) }
func (*ErrorCode) ProtoMessage()    {}
func (*ErrorCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *ErrorCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorCode.Unmarshal(m, b)
}
func (m *ErrorCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorCode.Marshal(b, m, deterministic)
}
func (m *ErrorCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorCode.Merge(m, src)
}
func (m *ErrorCode) XXX_Size() int {
	return xxx_messageInfo_ErrorCode.Size(m)
}
func (m *ErrorCode) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorCode.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorCode proto.InternalMessageInfo

func (m *ErrorCode) GetErr() int32 {
	if m != nil {
		return m.Err
	}
	return 0
}

func (m *ErrorCode) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type ID struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ID.Unmarshal(m, b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ID.Marshal(b, m, deterministic)
}
func (m *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(m, src)
}
func (m *ID) XXX_Size() int {
	return xxx_messageInfo_ID.Size(m)
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type ServiceCategory struct {
	ID                   *ID      `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Service              string   `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceCategory) Reset()         { *m = ServiceCategory{} }
func (m *ServiceCategory) String() string { return proto.CompactTextString(m) }
func (*ServiceCategory) ProtoMessage()    {}
func (*ServiceCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *ServiceCategory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceCategory.Unmarshal(m, b)
}
func (m *ServiceCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceCategory.Marshal(b, m, deterministic)
}
func (m *ServiceCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceCategory.Merge(m, src)
}
func (m *ServiceCategory) XXX_Size() int {
	return xxx_messageInfo_ServiceCategory.Size(m)
}
func (m *ServiceCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceCategory.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceCategory proto.InternalMessageInfo

func (m *ServiceCategory) GetID() *ID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ServiceCategory) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type SkillCategory struct {
	ID                   *ID      `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Category             string   `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SkillCategory) Reset()         { *m = SkillCategory{} }
func (m *SkillCategory) String() string { return proto.CompactTextString(m) }
func (*SkillCategory) ProtoMessage()    {}
func (*SkillCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *SkillCategory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SkillCategory.Unmarshal(m, b)
}
func (m *SkillCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SkillCategory.Marshal(b, m, deterministic)
}
func (m *SkillCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkillCategory.Merge(m, src)
}
func (m *SkillCategory) XXX_Size() int {
	return xxx_messageInfo_SkillCategory.Size(m)
}
func (m *SkillCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_SkillCategory.DiscardUnknown(m)
}

var xxx_messageInfo_SkillCategory proto.InternalMessageInfo

func (m *SkillCategory) GetID() *ID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *SkillCategory) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

type Skill struct {
	ID                   *ID            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Category             *SkillCategory `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Skill                string         `protobuf:"bytes,3,opt,name=skill,proto3" json:"skill,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Skill) Reset()         { *m = Skill{} }
func (m *Skill) String() string { return proto.CompactTextString(m) }
func (*Skill) ProtoMessage()    {}
func (*Skill) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *Skill) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Skill.Unmarshal(m, b)
}
func (m *Skill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Skill.Marshal(b, m, deterministic)
}
func (m *Skill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Skill.Merge(m, src)
}
func (m *Skill) XXX_Size() int {
	return xxx_messageInfo_Skill.Size(m)
}
func (m *Skill) XXX_DiscardUnknown() {
	xxx_messageInfo_Skill.DiscardUnknown(m)
}

var xxx_messageInfo_Skill proto.InternalMessageInfo

func (m *Skill) GetID() *ID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Skill) GetCategory() *SkillCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *Skill) GetSkill() string {
	if m != nil {
		return m.Skill
	}
	return ""
}

type CreateJob struct {
	EUID                 *ID              `protobuf:"bytes,1,opt,name=EUID,proto3" json:"EUID,omitempty"`
	Service              *ServiceCategory `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Category             *SkillCategory   `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Wage                 float32          `protobuf:"fixed32,4,opt,name=wage,proto3" json:"wage,omitempty"`
	Places               int32            `protobuf:"varint,5,opt,name=places,proto3" json:"places,omitempty"`
	Title                string           `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Exp                  string           `protobuf:"bytes,7,opt,name=exp,proto3" json:"exp,omitempty"`
	Description          string           `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreateJob) Reset()         { *m = CreateJob{} }
func (m *CreateJob) String() string { return proto.CompactTextString(m) }
func (*CreateJob) ProtoMessage()    {}
func (*CreateJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *CreateJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateJob.Unmarshal(m, b)
}
func (m *CreateJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateJob.Marshal(b, m, deterministic)
}
func (m *CreateJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateJob.Merge(m, src)
}
func (m *CreateJob) XXX_Size() int {
	return xxx_messageInfo_CreateJob.Size(m)
}
func (m *CreateJob) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateJob.DiscardUnknown(m)
}

var xxx_messageInfo_CreateJob proto.InternalMessageInfo

func (m *CreateJob) GetEUID() *ID {
	if m != nil {
		return m.EUID
	}
	return nil
}

func (m *CreateJob) GetService() *ServiceCategory {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *CreateJob) GetCategory() *SkillCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *CreateJob) GetWage() float32 {
	if m != nil {
		return m.Wage
	}
	return 0
}

func (m *CreateJob) GetPlaces() int32 {
	if m != nil {
		return m.Places
	}
	return 0
}

func (m *CreateJob) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateJob) GetExp() string {
	if m != nil {
		return m.Exp
	}
	return ""
}

func (m *CreateJob) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Job struct {
	ID                   *ID              `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	EUID                 *ID              `protobuf:"bytes,2,opt,name=EUID,proto3" json:"EUID,omitempty"`
	Service              *ServiceCategory `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Category             *SkillCategory   `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Wage                 float32          `protobuf:"fixed32,5,opt,name=wage,proto3" json:"wage,omitempty"`
	Places               int32            `protobuf:"varint,6,opt,name=places,proto3" json:"places,omitempty"`
	Title                string           `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Exp                  string           `protobuf:"bytes,8,opt,name=exp,proto3" json:"exp,omitempty"`
	Description          string           `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	PostTime             string           `protobuf:"bytes,10,opt,name=postTime,proto3" json:"postTime,omitempty"`
	NrOfCandidates       int32            `protobuf:"varint,11,opt,name=nrOfCandidates,proto3" json:"nrOfCandidates,omitempty"`
	EmployerRating       float32          `protobuf:"fixed32,12,opt,name=employerRating,proto3" json:"employerRating,omitempty"`
	MoneySpent           float32          `protobuf:"fixed32,13,opt,name=moneySpent,proto3" json:"moneySpent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetID() *ID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Job) GetEUID() *ID {
	if m != nil {
		return m.EUID
	}
	return nil
}

func (m *Job) GetService() *ServiceCategory {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *Job) GetCategory() *SkillCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *Job) GetWage() float32 {
	if m != nil {
		return m.Wage
	}
	return 0
}

func (m *Job) GetPlaces() int32 {
	if m != nil {
		return m.Places
	}
	return 0
}

func (m *Job) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Job) GetExp() string {
	if m != nil {
		return m.Exp
	}
	return ""
}

func (m *Job) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Job) GetPostTime() string {
	if m != nil {
		return m.PostTime
	}
	return ""
}

func (m *Job) GetNrOfCandidates() int32 {
	if m != nil {
		return m.NrOfCandidates
	}
	return 0
}

func (m *Job) GetEmployerRating() float32 {
	if m != nil {
		return m.EmployerRating
	}
	return 0
}

func (m *Job) GetMoneySpent() float32 {
	if m != nil {
		return m.MoneySpent
	}
	return 0
}

type Filter struct {
	ID                   *ID      `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	WageMin              float32  `protobuf:"fixed32,3,opt,name=wageMin,proto3" json:"wageMin,omitempty"`
	EmployerRating       float32  `protobuf:"fixed32,4,opt,name=employerRating,proto3" json:"employerRating,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetID() *ID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Filter) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Filter) GetWageMin() float32 {
	if m != nil {
		return m.WageMin
	}
	return 0
}

func (m *Filter) GetEmployerRating() float32 {
	if m != nil {
		return m.EmployerRating
	}
	return 0
}

type JobApplication struct {
	JID                  *ID      `protobuf:"bytes,1,opt,name=JID,proto3" json:"JID,omitempty"`
	FUID                 *ID      `protobuf:"bytes,2,opt,name=FUID,proto3" json:"FUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobApplication) Reset()         { *m = JobApplication{} }
func (m *JobApplication) String() string { return proto.CompactTextString(m) }
func (*JobApplication) ProtoMessage()    {}
func (*JobApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}

func (m *JobApplication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobApplication.Unmarshal(m, b)
}
func (m *JobApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobApplication.Marshal(b, m, deterministic)
}
func (m *JobApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobApplication.Merge(m, src)
}
func (m *JobApplication) XXX_Size() int {
	return xxx_messageInfo_JobApplication.Size(m)
}
func (m *JobApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_JobApplication.DiscardUnknown(m)
}

var xxx_messageInfo_JobApplication proto.InternalMessageInfo

func (m *JobApplication) GetJID() *ID {
	if m != nil {
		return m.JID
	}
	return nil
}

func (m *JobApplication) GetFUID() *ID {
	if m != nil {
		return m.FUID
	}
	return nil
}

type JobSelection struct {
	JID                  *ID      `protobuf:"bytes,1,opt,name=JID,proto3" json:"JID,omitempty"`
	FUID                 *ID      `protobuf:"bytes,2,opt,name=FUID,proto3" json:"FUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobSelection) Reset()         { *m = JobSelection{} }
func (m *JobSelection) String() string { return proto.CompactTextString(m) }
func (*JobSelection) ProtoMessage()    {}
func (*JobSelection) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}

func (m *JobSelection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobSelection.Unmarshal(m, b)
}
func (m *JobSelection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobSelection.Marshal(b, m, deterministic)
}
func (m *JobSelection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSelection.Merge(m, src)
}
func (m *JobSelection) XXX_Size() int {
	return xxx_messageInfo_JobSelection.Size(m)
}
func (m *JobSelection) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSelection.DiscardUnknown(m)
}

var xxx_messageInfo_JobSelection proto.InternalMessageInfo

func (m *JobSelection) GetJID() *ID {
	if m != nil {
		return m.JID
	}
	return nil
}

func (m *JobSelection) GetFUID() *ID {
	if m != nil {
		return m.FUID
	}
	return nil
}

type EmployerProfile struct {
	EUID                 *ID      `protobuf:"bytes,1,opt,name=EUID,proto3" json:"EUID,omitempty"`
	Phone                string   `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	LastName             string   `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	FirstName            string   `protobuf:"bytes,4,opt,name=firstName,proto3" json:"firstName,omitempty"`
	Rating               float32  `protobuf:"fixed32,5,opt,name=rating,proto3" json:"rating,omitempty"`
	JobsPosted           int32    `protobuf:"varint,6,opt,name=jobsPosted,proto3" json:"jobsPosted,omitempty"`
	MoneySpent           float32  `protobuf:"fixed32,7,opt,name=moneySpent,proto3" json:"moneySpent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmployerProfile) Reset()         { *m = EmployerProfile{} }
func (m *EmployerProfile) String() string { return proto.CompactTextString(m) }
func (*EmployerProfile) ProtoMessage()    {}
func (*EmployerProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}

func (m *EmployerProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmployerProfile.Unmarshal(m, b)
}
func (m *EmployerProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmployerProfile.Marshal(b, m, deterministic)
}
func (m *EmployerProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmployerProfile.Merge(m, src)
}
func (m *EmployerProfile) XXX_Size() int {
	return xxx_messageInfo_EmployerProfile.Size(m)
}
func (m *EmployerProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_EmployerProfile.DiscardUnknown(m)
}

var xxx_messageInfo_EmployerProfile proto.InternalMessageInfo

func (m *EmployerProfile) GetEUID() *ID {
	if m != nil {
		return m.EUID
	}
	return nil
}

func (m *EmployerProfile) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *EmployerProfile) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *EmployerProfile) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *EmployerProfile) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *EmployerProfile) GetJobsPosted() int32 {
	if m != nil {
		return m.JobsPosted
	}
	return 0
}

func (m *EmployerProfile) GetMoneySpent() float32 {
	if m != nil {
		return m.MoneySpent
	}
	return 0
}

type FreelancerProfile struct {
	FUID                 *ID      `protobuf:"bytes,1,opt,name=FUID,proto3" json:"FUID,omitempty"`
	Phone                string   `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	LastName             string   `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	FirstName            string   `protobuf:"bytes,4,opt,name=firstName,proto3" json:"firstName,omitempty"`
	Rating               float32  `protobuf:"fixed32,5,opt,name=rating,proto3" json:"rating,omitempty"`
	Balance              float32  `protobuf:"fixed32,6,opt,name=balance,proto3" json:"balance,omitempty"`
	Description          string   `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Photo                string   `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`
	MainSkill            *Skill   `protobuf:"bytes,9,opt,name=mainSkill,proto3" json:"mainSkill,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FreelancerProfile) Reset()         { *m = FreelancerProfile{} }
func (m *FreelancerProfile) String() string { return proto.CompactTextString(m) }
func (*FreelancerProfile) ProtoMessage()    {}
func (*FreelancerProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}

func (m *FreelancerProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FreelancerProfile.Unmarshal(m, b)
}
func (m *FreelancerProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FreelancerProfile.Marshal(b, m, deterministic)
}
func (m *FreelancerProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FreelancerProfile.Merge(m, src)
}
func (m *FreelancerProfile) XXX_Size() int {
	return xxx_messageInfo_FreelancerProfile.Size(m)
}
func (m *FreelancerProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_FreelancerProfile.DiscardUnknown(m)
}

var xxx_messageInfo_FreelancerProfile proto.InternalMessageInfo

func (m *FreelancerProfile) GetFUID() *ID {
	if m != nil {
		return m.FUID
	}
	return nil
}

func (m *FreelancerProfile) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *FreelancerProfile) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *FreelancerProfile) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *FreelancerProfile) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *FreelancerProfile) GetBalance() float32 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *FreelancerProfile) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FreelancerProfile) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *FreelancerProfile) GetMainSkill() *Skill {
	if m != nil {
		return m.MainSkill
	}
	return nil
}

func init() {
	proto.RegisterType((*Void)(nil), "api.Void")
	proto.RegisterType((*ErrorCode)(nil), "api.ErrorCode")
	proto.RegisterType((*ID)(nil), "api.ID")
	proto.RegisterType((*ServiceCategory)(nil), "api.ServiceCategory")
	proto.RegisterType((*SkillCategory)(nil), "api.SkillCategory")
	proto.RegisterType((*Skill)(nil), "api.Skill")
	proto.RegisterType((*CreateJob)(nil), "api.CreateJob")
	proto.RegisterType((*Job)(nil), "api.Job")
	proto.RegisterType((*Filter)(nil), "api.Filter")
	proto.RegisterType((*JobApplication)(nil), "api.JobApplication")
	proto.RegisterType((*JobSelection)(nil), "api.JobSelection")
	proto.RegisterType((*EmployerProfile)(nil), "api.EmployerProfile")
	proto.RegisterType((*FreelancerProfile)(nil), "api.FreelancerProfile")
}

func init() {
	proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c)
}

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 899 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x97, 0x1d, 0x27, 0x8e, 0x5f, 0xda, 0x94, 0x9d, 0xcd, 0x16, 0x13, 0x10, 0xaa, 0x0c, 0xac,
	0x7a, 0x2a, 0x21, 0x3d, 0x70, 0xd8, 0x03, 0x5a, 0x25, 0x4d, 0xb7, 0x91, 0x80, 0x55, 0x0a, 0xdc,
	0x1d, 0xfb, 0xb5, 0x3b, 0xe0, 0x78, 0xac, 0x99, 0x11, 0x6c, 0xbe, 0x07, 0x57, 0xbe, 0x16, 0xdf,
	0x80, 0xaf, 0xc0, 0x11, 0xa1, 0x99, 0xb1, 0x1d, 0xc7, 0x76, 0xe8, 0x56, 0x48, 0x7b, 0x89, 0xfc,
	0xfe, 0xbf, 0xf7, 0x7b, 0x7f, 0x26, 0xe0, 0x85, 0x19, 0xbd, 0xc8, 0x38, 0x93, 0x8c, 0x74, 0xc2,
	0x8c, 0x06, 0x3d, 0x70, 0x7e, 0x62, 0x34, 0x0e, 0xbe, 0x04, 0xef, 0x8a, 0x73, 0xc6, 0x67, 0x2c,
	0x46, 0xf2, 0x01, 0x74, 0x90, 0x73, 0xdf, 0x3a, 0xb3, 0xce, 0xbb, 0x2b, 0xf5, 0xa9, 0x38, 0x1b,
	0x71, 0xef, 0xdb, 0x67, 0xd6, 0xb9, 0xb7, 0x52, 0x9f, 0xc1, 0x08, 0xec, 0x9b, 0x39, 0x19, 0xaa,
	0x5f, 0xad, 0xe8, 0xad, 0xec, 0x9b, 0x79, 0x30, 0x87, 0x93, 0x5b, 0xe4, 0xbf, 0xd2, 0x08, 0x67,
	0xa1, 0xc4, 0x7b, 0xc6, 0xb7, 0xe4, 0xc3, 0x52, 0x65, 0x30, 0x75, 0x2f, 0x54, 0xf8, 0x9b, 0xb9,
	0xd2, 0x25, 0x3e, 0xb8, 0xc2, 0xe8, 0xe6, 0x7e, 0x0b, 0x32, 0x98, 0xc3, 0xf1, 0xed, 0x2f, 0x34,
	0x49, 0x1e, 0xf6, 0x31, 0x86, 0x7e, 0x94, 0x2b, 0xe5, 0x4e, 0x4a, 0x3a, 0xb8, 0x83, 0xae, 0xf6,
	0x72, 0xd8, 0xfa, 0xa2, 0x66, 0x3d, 0x98, 0x12, 0x2d, 0xde, 0x0b, 0xbe, 0xf3, 0x48, 0x46, 0xd0,
	0x15, 0x4a, 0xe4, 0x77, 0x74, 0x28, 0x43, 0x04, 0xff, 0x58, 0xe0, 0xcd, 0x38, 0x86, 0x12, 0x97,
	0x6c, 0x4d, 0x3e, 0x06, 0xe7, 0xea, 0xc7, 0x66, 0x38, 0xcd, 0x24, 0x17, 0xfb, 0x25, 0x0f, 0xa6,
	0x23, 0x13, 0x6f, 0x1f, 0xb2, 0x12, 0x88, 0xbd, 0x04, 0x3b, 0xef, 0x90, 0x20, 0x01, 0xe7, 0xb7,
	0xf0, 0x1e, 0x7d, 0xe7, 0xcc, 0x3a, 0xb7, 0x57, 0xfa, 0x9b, 0x9c, 0x42, 0x2f, 0x4b, 0xc2, 0x08,
	0x85, 0xdf, 0xd5, 0xfd, 0xcc, 0x29, 0x55, 0x8c, 0xa4, 0x32, 0x41, 0xbf, 0x67, 0x8a, 0xd1, 0x84,
	0x6e, 0xfd, 0xdb, 0xcc, 0x77, 0x4d, 0xa3, 0xf1, 0x6d, 0x46, 0xce, 0x60, 0x10, 0xa3, 0x88, 0x38,
	0xcd, 0x24, 0x65, 0xa9, 0xdf, 0xd7, 0x92, 0x2a, 0x2b, 0xf8, 0xa3, 0x03, 0x1d, 0x55, 0xfa, 0x41,
	0x9c, 0x0b, 0x4c, 0xec, 0x07, 0x30, 0xe9, 0x3c, 0x16, 0x13, 0xe7, 0x11, 0x98, 0x74, 0x5b, 0x31,
	0xe9, 0xb5, 0x63, 0xe2, 0xb6, 0x60, 0xd2, 0x3f, 0x88, 0x89, 0xd7, 0xc0, 0x44, 0x0d, 0x66, 0xc6,
	0x84, 0xfc, 0x81, 0x6e, 0xd0, 0x07, 0x33, 0x98, 0x05, 0x4d, 0x9e, 0xc3, 0x30, 0xe5, 0xdf, 0xdf,
	0xcd, 0xc2, 0x34, 0xa6, 0x71, 0x28, 0x51, 0xf8, 0x03, 0x9d, 0x45, 0x8d, 0xab, 0xf4, 0x70, 0x93,
	0x25, 0x6c, 0x8b, 0x7c, 0x15, 0x4a, 0x9a, 0xde, 0xfb, 0x47, 0xba, 0x86, 0x1a, 0x97, 0x7c, 0x0a,
	0xb0, 0x61, 0x29, 0x6e, 0x6f, 0x33, 0x4c, 0xa5, 0x7f, 0xac, 0x75, 0x2a, 0x9c, 0x60, 0x0b, 0xbd,
	0x05, 0x4d, 0x24, 0xf2, 0xc3, 0x1d, 0x2a, 0x0b, 0xb7, 0xab, 0x85, 0xfb, 0xe0, 0x2a, 0xb8, 0xbe,
	0xa5, 0xa9, 0x6e, 0x8d, 0xbd, 0x2a, 0xc8, 0x96, 0xd4, 0x9c, 0xb6, 0xd4, 0x82, 0x57, 0x30, 0x5c,
	0xb2, 0xf5, 0xcb, 0x2c, 0x4b, 0x68, 0x14, 0x6a, 0x60, 0x3e, 0x82, 0xce, 0xb2, 0x99, 0x83, 0xe2,
	0xa9, 0x31, 0x59, 0xb4, 0x8d, 0x89, 0x62, 0x06, 0x0b, 0x38, 0x5a, 0xb2, 0xf5, 0x2d, 0x26, 0x18,
	0xfd, 0x2f, 0x3f, 0x7f, 0x5a, 0x70, 0x72, 0x95, 0x27, 0xf9, 0x9a, 0xb3, 0x3b, 0x9a, 0xe0, 0x7f,
	0xef, 0xec, 0x08, 0xba, 0xd9, 0x1b, 0x96, 0x96, 0xd0, 0x68, 0x42, 0xf5, 0x37, 0x09, 0x85, 0xfc,
	0x2e, 0xdc, 0x60, 0x7e, 0x0d, 0x4a, 0x9a, 0x7c, 0x02, 0xde, 0x1d, 0xe5, 0xb9, 0xd0, 0xd1, 0xc2,
	0x1d, 0x43, 0xcd, 0x1e, 0x37, 0x90, 0x99, 0x89, 0xcc, 0x29, 0xd5, 0xc5, 0x9f, 0xd9, 0x5a, 0xbc,
	0x66, 0x42, 0x62, 0x9c, 0xcf, 0x65, 0x85, 0x53, 0xeb, 0xb2, 0xdb, 0xe8, 0xf2, 0xef, 0x36, 0x3c,
	0x59, 0x70, 0xc4, 0x24, 0x4c, 0xa3, 0xbd, 0xd2, 0x16, 0x6d, 0xa5, 0x2d, 0xde, 0x67, 0x69, 0x3e,
	0xb8, 0xeb, 0x50, 0xe7, 0xa5, 0xeb, 0xb2, 0x57, 0x05, 0x59, 0x5f, 0x24, 0xb7, 0xb9, 0x48, 0x26,
	0x47, 0xc9, 0xf2, 0xf5, 0x33, 0x04, 0x39, 0x07, 0x6f, 0x13, 0xd2, 0x54, 0xef, 0xbc, 0x5e, 0xbf,
	0xc1, 0x14, 0x76, 0x57, 0x60, 0xb5, 0x13, 0x4e, 0xff, 0xb6, 0xa0, 0x9f, 0x83, 0x21, 0xc8, 0x0b,
	0x78, 0x7a, 0x15, 0x53, 0x59, 0xef, 0xbf, 0xb9, 0x38, 0x35, 0xee, 0x78, 0x68, 0xb8, 0xe5, 0xab,
	0xf8, 0x0d, 0x3c, 0x53, 0xc6, 0x4d, 0x8c, 0x4f, 0xb5, 0x62, 0x83, 0xdf, 0x70, 0x70, 0x09, 0xe4,
	0x1a, 0x1b, 0xc1, 0x8b, 0x9e, 0x8c, 0x5b, 0xb3, 0x20, 0x5f, 0xc3, 0xe8, 0x1a, 0x5b, 0x82, 0x96,
	0x66, 0x07, 0xa2, 0x4f, 0xff, 0x72, 0xc0, 0x59, 0xb2, 0xb5, 0x20, 0x97, 0x30, 0xbc, 0x46, 0xf9,
	0x32, 0x49, 0xf2, 0x93, 0x2a, 0x88, 0xa7, 0x4d, 0xd4, 0xbb, 0x3f, 0x6e, 0x3d, 0xb6, 0x13, 0x8b,
	0xcc, 0xe0, 0x59, 0x6e, 0x54, 0x39, 0xab, 0x54, 0x9d, 0xc8, 0x36, 0x83, 0x71, 0xcb, 0x09, 0x9e,
	0x58, 0x64, 0x02, 0x47, 0x15, 0x27, 0x82, 0xb4, 0x68, 0x8d, 0x2b, 0x6d, 0x9b, 0x58, 0xe4, 0x33,
	0x70, 0xd5, 0xb8, 0xab, 0xd7, 0xc4, 0xa0, 0x57, 0x3e, 0xac, 0xe3, 0xbe, 0xa6, 0xcd, 0x13, 0xdb,
	0xbb, 0x46, 0xad, 0x53, 0x82, 0xb0, 0x13, 0x06, 0xe0, 0x1a, 0xa1, 0x20, 0x03, 0x83, 0x8c, 0x3e,
	0x7d, 0x3b, 0x8d, 0x89, 0x45, 0xa6, 0x30, 0x50, 0x27, 0x69, 0xbb, 0x60, 0x5c, 0x99, 0x3c, 0x2d,
	0x44, 0x95, 0x3b, 0xd5, 0x68, 0xde, 0x14, 0x8e, 0x55, 0x2d, 0x46, 0x23, 0x95, 0xe2, 0xc1, 0x06,
	0x4c, 0x2c, 0xf2, 0x15, 0x1c, 0x99, 0x83, 0x95, 0x07, 0x7a, 0x52, 0x04, 0x2a, 0xcf, 0x58, 0x23,
	0xcc, 0x0b, 0x38, 0x55, 0x61, 0xa2, 0x08, 0x33, 0x89, 0xf1, 0xce, 0xe9, 0x3b, 0xc5, 0x7b, 0x0e,
	0x27, 0x15, 0x63, 0x8d, 0x41, 0x13, 0xa1, 0x89, 0x45, 0xbe, 0xd0, 0x13, 0xf1, 0x8a, 0x0a, 0xc9,
	0xf8, 0xf6, 0xb0, 0xda, 0xe7, 0xe0, 0x2d, 0x68, 0x4a, 0xc5, 0x9b, 0x3d, 0xa8, 0x6b, 0x19, 0xaf,
	0x7b, 0xfa, 0xdf, 0xe4, 0xe5, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x7c, 0xaf, 0x5b, 0x5a,
	0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProfilesClient is the client API for Profiles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProfilesClient interface {
	EditEmployerProfile(ctx context.Context, in *EmployerProfile, opts ...grpc.CallOption) (*ErrorCode, error)
	EditFreelancerProfile(ctx context.Context, in *FreelancerProfile, opts ...grpc.CallOption) (*ErrorCode, error)
	GetEmployerProfile(ctx context.Context, in *ID, opts ...grpc.CallOption) (*EmployerProfile, error)
	GetFreelancerProfile(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FreelancerProfile, error)
}

type profilesClient struct {
	cc grpc.ClientConnInterface
}

func NewProfilesClient(cc grpc.ClientConnInterface) ProfilesClient {
	return &profilesClient{cc}
}

func (c *profilesClient) EditEmployerProfile(ctx context.Context, in *EmployerProfile, opts ...grpc.CallOption) (*ErrorCode, error) {
	out := new(ErrorCode)
	err := c.cc.Invoke(ctx, "/api.Profiles/EditEmployerProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) EditFreelancerProfile(ctx context.Context, in *FreelancerProfile, opts ...grpc.CallOption) (*ErrorCode, error) {
	out := new(ErrorCode)
	err := c.cc.Invoke(ctx, "/api.Profiles/EditFreelancerProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) GetEmployerProfile(ctx context.Context, in *ID, opts ...grpc.CallOption) (*EmployerProfile, error) {
	out := new(EmployerProfile)
	err := c.cc.Invoke(ctx, "/api.Profiles/GetEmployerProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) GetFreelancerProfile(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FreelancerProfile, error) {
	out := new(FreelancerProfile)
	err := c.cc.Invoke(ctx, "/api.Profiles/GetFreelancerProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfilesServer is the server API for Profiles service.
type ProfilesServer interface {
	EditEmployerProfile(context.Context, *EmployerProfile) (*ErrorCode, error)
	EditFreelancerProfile(context.Context, *FreelancerProfile) (*ErrorCode, error)
	GetEmployerProfile(context.Context, *ID) (*EmployerProfile, error)
	GetFreelancerProfile(context.Context, *ID) (*FreelancerProfile, error)
}

// UnimplementedProfilesServer can be embedded to have forward compatible implementations.
type UnimplementedProfilesServer struct {
}

func (*UnimplementedProfilesServer) EditEmployerProfile(ctx context.Context, req *EmployerProfile) (*ErrorCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditEmployerProfile not implemented")
}
func (*UnimplementedProfilesServer) EditFreelancerProfile(ctx context.Context, req *FreelancerProfile) (*ErrorCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditFreelancerProfile not implemented")
}
func (*UnimplementedProfilesServer) GetEmployerProfile(ctx context.Context, req *ID) (*EmployerProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployerProfile not implemented")
}
func (*UnimplementedProfilesServer) GetFreelancerProfile(ctx context.Context, req *ID) (*FreelancerProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreelancerProfile not implemented")
}

func RegisterProfilesServer(s *grpc.Server, srv ProfilesServer) {
	s.RegisterService(&_Profiles_serviceDesc, srv)
}

func _Profiles_EditEmployerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployerProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).EditEmployerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Profiles/EditEmployerProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).EditEmployerProfile(ctx, req.(*EmployerProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_EditFreelancerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreelancerProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).EditFreelancerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Profiles/EditFreelancerProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).EditFreelancerProfile(ctx, req.(*FreelancerProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_GetEmployerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).GetEmployerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Profiles/GetEmployerProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).GetEmployerProfile(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_GetFreelancerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).GetFreelancerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Profiles/GetFreelancerProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).GetFreelancerProfile(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Profiles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Profiles",
	HandlerType: (*ProfilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EditEmployerProfile",
			Handler:    _Profiles_EditEmployerProfile_Handler,
		},
		{
			MethodName: "EditFreelancerProfile",
			Handler:    _Profiles_EditFreelancerProfile_Handler,
		},
		{
			MethodName: "GetEmployerProfile",
			Handler:    _Profiles_GetEmployerProfile_Handler,
		},
		{
			MethodName: "GetFreelancerProfile",
			Handler:    _Profiles_GetFreelancerProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// JobsClient is the client API for Jobs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobsClient interface {
	GetAllServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (Jobs_GetAllServicesClient, error)
	GetAllSkillCategories(ctx context.Context, in *ServiceCategory, opts ...grpc.CallOption) (Jobs_GetAllSkillCategoriesClient, error)
	GetAllSkills(ctx context.Context, in *SkillCategory, opts ...grpc.CallOption) (Jobs_GetAllSkillsClient, error)
	PostJob(ctx context.Context, in *CreateJob, opts ...grpc.CallOption) (*Job, error)
	GetJob(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Job, error)
	GetJobs(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Jobs_GetJobsClient, error)
	ApplyForJob(ctx context.Context, in *JobApplication, opts ...grpc.CallOption) (*ErrorCode, error)
	GetApplicants(ctx context.Context, in *ID, opts ...grpc.CallOption) (Jobs_GetApplicantsClient, error)
	SelectForJob(ctx context.Context, in *JobSelection, opts ...grpc.CallOption) (*ErrorCode, error)
	GetAcceptedFreelancers(ctx context.Context, in *ID, opts ...grpc.CallOption) (Jobs_GetAcceptedFreelancersClient, error)
	GetAcceptedJobs(ctx context.Context, in *ID, opts ...grpc.CallOption) (Jobs_GetAcceptedJobsClient, error)
	GetHistoryJobs(ctx context.Context, in *ID, opts ...grpc.CallOption) (Jobs_GetHistoryJobsClient, error)
	FinishJob(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ErrorCode, error)
}

type jobsClient struct {
	cc grpc.ClientConnInterface
}

func NewJobsClient(cc grpc.ClientConnInterface) JobsClient {
	return &jobsClient{cc}
}

func (c *jobsClient) GetAllServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (Jobs_GetAllServicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Jobs_serviceDesc.Streams[0], "/api.Jobs/GetAllServices", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobsGetAllServicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Jobs_GetAllServicesClient interface {
	Recv() (*ServiceCategory, error)
	grpc.ClientStream
}

type jobsGetAllServicesClient struct {
	grpc.ClientStream
}

func (x *jobsGetAllServicesClient) Recv() (*ServiceCategory, error) {
	m := new(ServiceCategory)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobsClient) GetAllSkillCategories(ctx context.Context, in *ServiceCategory, opts ...grpc.CallOption) (Jobs_GetAllSkillCategoriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Jobs_serviceDesc.Streams[1], "/api.Jobs/GetAllSkillCategories", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobsGetAllSkillCategoriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Jobs_GetAllSkillCategoriesClient interface {
	Recv() (*SkillCategory, error)
	grpc.ClientStream
}

type jobsGetAllSkillCategoriesClient struct {
	grpc.ClientStream
}

func (x *jobsGetAllSkillCategoriesClient) Recv() (*SkillCategory, error) {
	m := new(SkillCategory)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobsClient) GetAllSkills(ctx context.Context, in *SkillCategory, opts ...grpc.CallOption) (Jobs_GetAllSkillsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Jobs_serviceDesc.Streams[2], "/api.Jobs/GetAllSkills", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobsGetAllSkillsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Jobs_GetAllSkillsClient interface {
	Recv() (*Skill, error)
	grpc.ClientStream
}

type jobsGetAllSkillsClient struct {
	grpc.ClientStream
}

func (x *jobsGetAllSkillsClient) Recv() (*Skill, error) {
	m := new(Skill)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobsClient) PostJob(ctx context.Context, in *CreateJob, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/api.Jobs/PostJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) GetJob(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/api.Jobs/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) GetJobs(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Jobs_GetJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Jobs_serviceDesc.Streams[3], "/api.Jobs/GetJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobsGetJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Jobs_GetJobsClient interface {
	Recv() (*Job, error)
	grpc.ClientStream
}

type jobsGetJobsClient struct {
	grpc.ClientStream
}

func (x *jobsGetJobsClient) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobsClient) ApplyForJob(ctx context.Context, in *JobApplication, opts ...grpc.CallOption) (*ErrorCode, error) {
	out := new(ErrorCode)
	err := c.cc.Invoke(ctx, "/api.Jobs/ApplyForJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) GetApplicants(ctx context.Context, in *ID, opts ...grpc.CallOption) (Jobs_GetApplicantsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Jobs_serviceDesc.Streams[4], "/api.Jobs/GetApplicants", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobsGetApplicantsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Jobs_GetApplicantsClient interface {
	Recv() (*FreelancerProfile, error)
	grpc.ClientStream
}

type jobsGetApplicantsClient struct {
	grpc.ClientStream
}

func (x *jobsGetApplicantsClient) Recv() (*FreelancerProfile, error) {
	m := new(FreelancerProfile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobsClient) SelectForJob(ctx context.Context, in *JobSelection, opts ...grpc.CallOption) (*ErrorCode, error) {
	out := new(ErrorCode)
	err := c.cc.Invoke(ctx, "/api.Jobs/SelectForJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) GetAcceptedFreelancers(ctx context.Context, in *ID, opts ...grpc.CallOption) (Jobs_GetAcceptedFreelancersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Jobs_serviceDesc.Streams[5], "/api.Jobs/GetAcceptedFreelancers", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobsGetAcceptedFreelancersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Jobs_GetAcceptedFreelancersClient interface {
	Recv() (*FreelancerProfile, error)
	grpc.ClientStream
}

type jobsGetAcceptedFreelancersClient struct {
	grpc.ClientStream
}

func (x *jobsGetAcceptedFreelancersClient) Recv() (*FreelancerProfile, error) {
	m := new(FreelancerProfile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobsClient) GetAcceptedJobs(ctx context.Context, in *ID, opts ...grpc.CallOption) (Jobs_GetAcceptedJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Jobs_serviceDesc.Streams[6], "/api.Jobs/GetAcceptedJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobsGetAcceptedJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Jobs_GetAcceptedJobsClient interface {
	Recv() (*Job, error)
	grpc.ClientStream
}

type jobsGetAcceptedJobsClient struct {
	grpc.ClientStream
}

func (x *jobsGetAcceptedJobsClient) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobsClient) GetHistoryJobs(ctx context.Context, in *ID, opts ...grpc.CallOption) (Jobs_GetHistoryJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Jobs_serviceDesc.Streams[7], "/api.Jobs/GetHistoryJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobsGetHistoryJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Jobs_GetHistoryJobsClient interface {
	Recv() (*Job, error)
	grpc.ClientStream
}

type jobsGetHistoryJobsClient struct {
	grpc.ClientStream
}

func (x *jobsGetHistoryJobsClient) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobsClient) FinishJob(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ErrorCode, error) {
	out := new(ErrorCode)
	err := c.cc.Invoke(ctx, "/api.Jobs/FinishJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobsServer is the server API for Jobs service.
type JobsServer interface {
	GetAllServices(*Void, Jobs_GetAllServicesServer) error
	GetAllSkillCategories(*ServiceCategory, Jobs_GetAllSkillCategoriesServer) error
	GetAllSkills(*SkillCategory, Jobs_GetAllSkillsServer) error
	PostJob(context.Context, *CreateJob) (*Job, error)
	GetJob(context.Context, *ID) (*Job, error)
	GetJobs(*Filter, Jobs_GetJobsServer) error
	ApplyForJob(context.Context, *JobApplication) (*ErrorCode, error)
	GetApplicants(*ID, Jobs_GetApplicantsServer) error
	SelectForJob(context.Context, *JobSelection) (*ErrorCode, error)
	GetAcceptedFreelancers(*ID, Jobs_GetAcceptedFreelancersServer) error
	GetAcceptedJobs(*ID, Jobs_GetAcceptedJobsServer) error
	GetHistoryJobs(*ID, Jobs_GetHistoryJobsServer) error
	FinishJob(context.Context, *ID) (*ErrorCode, error)
}

// UnimplementedJobsServer can be embedded to have forward compatible implementations.
type UnimplementedJobsServer struct {
}

func (*UnimplementedJobsServer) GetAllServices(req *Void, srv Jobs_GetAllServicesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllServices not implemented")
}
func (*UnimplementedJobsServer) GetAllSkillCategories(req *ServiceCategory, srv Jobs_GetAllSkillCategoriesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllSkillCategories not implemented")
}
func (*UnimplementedJobsServer) GetAllSkills(req *SkillCategory, srv Jobs_GetAllSkillsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllSkills not implemented")
}
func (*UnimplementedJobsServer) PostJob(ctx context.Context, req *CreateJob) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostJob not implemented")
}
func (*UnimplementedJobsServer) GetJob(ctx context.Context, req *ID) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedJobsServer) GetJobs(req *Filter, srv Jobs_GetJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (*UnimplementedJobsServer) ApplyForJob(ctx context.Context, req *JobApplication) (*ErrorCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyForJob not implemented")
}
func (*UnimplementedJobsServer) GetApplicants(req *ID, srv Jobs_GetApplicantsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetApplicants not implemented")
}
func (*UnimplementedJobsServer) SelectForJob(ctx context.Context, req *JobSelection) (*ErrorCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectForJob not implemented")
}
func (*UnimplementedJobsServer) GetAcceptedFreelancers(req *ID, srv Jobs_GetAcceptedFreelancersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAcceptedFreelancers not implemented")
}
func (*UnimplementedJobsServer) GetAcceptedJobs(req *ID, srv Jobs_GetAcceptedJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAcceptedJobs not implemented")
}
func (*UnimplementedJobsServer) GetHistoryJobs(req *ID, srv Jobs_GetHistoryJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetHistoryJobs not implemented")
}
func (*UnimplementedJobsServer) FinishJob(ctx context.Context, req *ID) (*ErrorCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishJob not implemented")
}

func RegisterJobsServer(s *grpc.Server, srv JobsServer) {
	s.RegisterService(&_Jobs_serviceDesc, srv)
}

func _Jobs_GetAllServices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServer).GetAllServices(m, &jobsGetAllServicesServer{stream})
}

type Jobs_GetAllServicesServer interface {
	Send(*ServiceCategory) error
	grpc.ServerStream
}

type jobsGetAllServicesServer struct {
	grpc.ServerStream
}

func (x *jobsGetAllServicesServer) Send(m *ServiceCategory) error {
	return x.ServerStream.SendMsg(m)
}

func _Jobs_GetAllSkillCategories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceCategory)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServer).GetAllSkillCategories(m, &jobsGetAllSkillCategoriesServer{stream})
}

type Jobs_GetAllSkillCategoriesServer interface {
	Send(*SkillCategory) error
	grpc.ServerStream
}

type jobsGetAllSkillCategoriesServer struct {
	grpc.ServerStream
}

func (x *jobsGetAllSkillCategoriesServer) Send(m *SkillCategory) error {
	return x.ServerStream.SendMsg(m)
}

func _Jobs_GetAllSkills_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SkillCategory)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServer).GetAllSkills(m, &jobsGetAllSkillsServer{stream})
}

type Jobs_GetAllSkillsServer interface {
	Send(*Skill) error
	grpc.ServerStream
}

type jobsGetAllSkillsServer struct {
	grpc.ServerStream
}

func (x *jobsGetAllSkillsServer) Send(m *Skill) error {
	return x.ServerStream.SendMsg(m)
}

func _Jobs_PostJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).PostJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Jobs/PostJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).PostJob(ctx, req.(*CreateJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Jobs/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).GetJob(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_GetJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServer).GetJobs(m, &jobsGetJobsServer{stream})
}

type Jobs_GetJobsServer interface {
	Send(*Job) error
	grpc.ServerStream
}

type jobsGetJobsServer struct {
	grpc.ServerStream
}

func (x *jobsGetJobsServer) Send(m *Job) error {
	return x.ServerStream.SendMsg(m)
}

func _Jobs_ApplyForJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobApplication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).ApplyForJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Jobs/ApplyForJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).ApplyForJob(ctx, req.(*JobApplication))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_GetApplicants_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServer).GetApplicants(m, &jobsGetApplicantsServer{stream})
}

type Jobs_GetApplicantsServer interface {
	Send(*FreelancerProfile) error
	grpc.ServerStream
}

type jobsGetApplicantsServer struct {
	grpc.ServerStream
}

func (x *jobsGetApplicantsServer) Send(m *FreelancerProfile) error {
	return x.ServerStream.SendMsg(m)
}

func _Jobs_SelectForJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).SelectForJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Jobs/SelectForJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).SelectForJob(ctx, req.(*JobSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_GetAcceptedFreelancers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServer).GetAcceptedFreelancers(m, &jobsGetAcceptedFreelancersServer{stream})
}

type Jobs_GetAcceptedFreelancersServer interface {
	Send(*FreelancerProfile) error
	grpc.ServerStream
}

type jobsGetAcceptedFreelancersServer struct {
	grpc.ServerStream
}

func (x *jobsGetAcceptedFreelancersServer) Send(m *FreelancerProfile) error {
	return x.ServerStream.SendMsg(m)
}

func _Jobs_GetAcceptedJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServer).GetAcceptedJobs(m, &jobsGetAcceptedJobsServer{stream})
}

type Jobs_GetAcceptedJobsServer interface {
	Send(*Job) error
	grpc.ServerStream
}

type jobsGetAcceptedJobsServer struct {
	grpc.ServerStream
}

func (x *jobsGetAcceptedJobsServer) Send(m *Job) error {
	return x.ServerStream.SendMsg(m)
}

func _Jobs_GetHistoryJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServer).GetHistoryJobs(m, &jobsGetHistoryJobsServer{stream})
}

type Jobs_GetHistoryJobsServer interface {
	Send(*Job) error
	grpc.ServerStream
}

type jobsGetHistoryJobsServer struct {
	grpc.ServerStream
}

func (x *jobsGetHistoryJobsServer) Send(m *Job) error {
	return x.ServerStream.SendMsg(m)
}

func _Jobs_FinishJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).FinishJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Jobs/FinishJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).FinishJob(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Jobs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Jobs",
	HandlerType: (*JobsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostJob",
			Handler:    _Jobs_PostJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Jobs_GetJob_Handler,
		},
		{
			MethodName: "ApplyForJob",
			Handler:    _Jobs_ApplyForJob_Handler,
		},
		{
			MethodName: "SelectForJob",
			Handler:    _Jobs_SelectForJob_Handler,
		},
		{
			MethodName: "FinishJob",
			Handler:    _Jobs_FinishJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllServices",
			Handler:       _Jobs_GetAllServices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllSkillCategories",
			Handler:       _Jobs_GetAllSkillCategories_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllSkills",
			Handler:       _Jobs_GetAllSkills_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetJobs",
			Handler:       _Jobs_GetJobs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetApplicants",
			Handler:       _Jobs_GetApplicants_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAcceptedFreelancers",
			Handler:       _Jobs_GetAcceptedFreelancers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAcceptedJobs",
			Handler:       _Jobs_GetAcceptedJobs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetHistoryJobs",
			Handler:       _Jobs_GetHistoryJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
